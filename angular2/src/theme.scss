
// Include theming for Angular Material with `mat.theme()`.
// This Sass mixin will define CSS variables that are used for styling Angular Material
// components according to the Material 3 design spec.
// Learn more about theming and how to use it for your application's
// custom components at https://material.angular.dev/guide/theming
@use '@angular/material' as mat;

html {
  @include mat.theme((
    color: (
      primary: mat.$azure-palette,
      tertiary: mat.$blue-palette,
    ),
    typography: Roboto,
    density: 0,
  ));
}

body {
  // Default the application to a light color theme. This can be changed to
  // `dark` to enable the dark color theme, or to `light dark` to defer to the
  // user's system settings.
  color-scheme: light;

  // Set a default background, font and text colors for the application using
  // Angular Material's system-level CSS variables. Learn more about these
  // variables at https://material.angular.dev/guide/system-variables
  background-color: var(--mat-sys-surface);
  color: var(--mat-sys-on-surface);
  font: var(--mat-sys-body-medium);

  // Reset the user agent margin.
  margin: 0;
}
@import '~@angular/material/theming';

@include mat-core();

// custom background and foreground palettes
$my-dark-theme-background: (
  status-bar: map_get($mat-blue, 200),
  app-bar:    map_get($mat-blue, 200),
  background: orange,
  hover:      rgba(white, 0.04), 
  card:       map_get($mat-blue, 100),
  dialog:     map_get($mat-grey, 800),
  disabled-button: $white-12-opacity,
  raised-button: map-get($mat-blue, 800),
  focused-button: $white-6-opacity,
  selected-button: map_get($mat-grey, 900),
  selected-disabled-button: map_get($mat-grey, 800),
  disabled-button-toggle: black,
  unselected-chip: map_get($mat-grey, 700),
  disabled-list-option: black,
);

$my-dark-theme-foreground: (
  base:              black,
 // divider:           $white-12-opacity,
 // dividers:          $white-12-opacity,
 // disabled:          rgba(white, 0.3),
 // disabled-button:   rgba(white, 0.3),
 // disabled-text:     rgba(white, 0.3),
 //// hint-text:         rgba(white, 0.3),
 // secondary-text:    rgba(white, 0.7),
 // icon:              white,
 // icons:             white,
 // text:              black,
 //// slider-min:        white,
 // slider-off:        rgba(white, 0.3),
 // slider-off-active: rgba(white, 0.3),
);

// instead of creating a theme with mat-light-theme like a sane person, we will create our own theme-creating function that lets us apply our own foreground and background palettes.
@function create-wonky-theme($primary, $accent, $warn: mat-palette($mat-red)) {
  @return (
    primary: $primary,
    accent: $accent,
    warn: $warn,
    is-dark: false,
    foreground: $my-dark-theme-foreground,
    background: $my-dark-theme-background,
  );
}

// The rest of this is like a normal theme.scss file. The only difference being that we use create-wonky-theme instead of mat-light-theme
$custom-theme-primary: mat-palette($mat-light-blue);
$custom-theme-accent: mat-palette($mat-blue);
$custom-theme-warn: mat-palette($mat-red);

$custom-theme: create-wonky-theme($custom-theme-primary, $custom-theme-accent, $custom-theme-warn);

@include angular-material-theme($custom-theme);
