// Include theming for Angular Material with `mat.theme()`.
// This Sass mixin will define CSS variables that are used for styling Angular Material
// components according to the Material 3 design spec.
// Learn more about theming and how to use it for your application's
// custom components at https://material.angular.dev/guide/theming
@use '@angular/material' as mat;
@use "googleicon.css";
@include mat.core();

.my-app {
  position: absolute;
  margin: 20 auto;
  padding-top: 20px;
  padding-right: 20px;
  padding-bottom: 20px;
  padding-left: 20px;
}

a{
   text-decoration: none;
   color: inherit;
}

.mat-form-field{
  width: 40vw;
}

html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }

html {
  @include mat.theme((
    color: (
      primary: mat.$azure-palette,
      tertiary: mat.$blue-palette,
    ),
    typography: Roboto,
    density: 0,
  ));
}

body {
  // Default the application to a light color theme. This can be changed to
  // `dark` to enable the dark color theme, or to `light dark` to defer to the
  // user's system settings.
  color-scheme: light;

  // Set a default background, font and text colors for the application using
  // Angular Material's system-level CSS variables. Learn more about these
  // variables at https://material.angular.dev/guide/system-variables
  background-color: var(--mat-sys-surface);
  color: var(--mat-sys-on-surface);
  font: var(--mat-sys-body-medium);

  // Reset the user agent margin.
  margin: 0;
}

// custom background and foreground palettes
$my-dark-theme-background: (
  status-bar: mat.m2-define-palette(mat.$m2-indigo-palette, 200),         //mat-palette(mat.$blue-palette, 200),
  app-bar:    mat.m2-define-palette(mat.$m2-indigo-palette, 200),
  background: orange,
  hover:      rgba(white, 0.04), 
  card:       mat.m2-define-palette(mat.$m2-indigo-palette, 100),
  dialog:     mat.m2-define-palette(mat.$m2-grey-palette, 800),
  disabled-button: white,
  raised-button: mat.m2-define-palette(mat.$m2-indigo-palette, 800),
  focused-button: white,
  selected-button: mat.m2-define-palette(mat.$m2-grey-palette, 900),
  selected-disabled-button: mat.m2-define-palette(mat.$m2-grey-palette, 800),
  disabled-button-toggle: black,
  unselected-chip: mat.m2-define-palette(mat.$m2-grey-palette, 700),
  disabled-list-option: black,
);

$my-dark-theme-foreground: (
  base:              black,
);

// instead of creating a theme with mat-light-theme like a sane person, we will create our own theme-creating function that lets us apply our own foreground and background palettes.
@function create-wonky-theme($primary, $accent, $warn: mat.m2-define-palette(mat.$m2-red-palette)) {
  @return (
    primary: $primary,
    accent: $accent,
    warn: $warn,
    is-dark: false,
    foreground: $my-dark-theme-foreground,
    background: $my-dark-theme-background,
  );
}

// The rest of this is like a normal theme.scss file. The only difference being that we use create-wonky-theme instead of mat-light-theme
$custom-theme-primary: mat.m2-define-palette(mat.$m2-indigo-palette, 100);
$custom-theme-accent: mat.m2-define-palette(mat.$m2-indigo-palette);
$custom-theme-warn: mat.m2-define-palette(mat.$m2-red-palette, 200);

$custom-theme: create-wonky-theme($custom-theme-primary, $custom-theme-accent, $custom-theme-warn);

@include mat.theme($custom-theme);
